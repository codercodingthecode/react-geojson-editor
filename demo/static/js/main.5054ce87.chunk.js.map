{"version":3,"sources":["SearchRegion.js","LocationSearch.js","App.js","serviceWorker.js","index.js"],"names":["getSuggestionValue","suggestion","name","renderSuggestion","react_default","a","createElement","SearchRegion","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSuggestions","value","escapedValue","trim","replace","regex","RegExp","props","regions","filter","region","test","onChange","event","_ref","newValue","method","setState","onSuggestionsFetchRequested","_ref2","console","log","suggestions","onSuggestionsClearRequested","onSuggestionSelected","_ref3","suggestionValue","suggestionIndex","sectionIndex","state","inherits","createClass","key","_this$state","inputProps","placeholder","dist_default","React","Component","IdGenerator","i","n","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","stop","_marked","generator","LocationLink","map","slicedToArray","f","_ref4","_ref5","onClick","description","style","border","outline","width","padding","margin","opacity","height","cursor","display","flexDirection","justifyContent","textAlign","marginLeft","ActiveLocationLink","_ref6","paddingTop","index_es","icon","faAngleRight","color","faEllipsisH","EmptyLocationLink","_ref7","showControls","disabled","AppControllers","_ref8","_ref8$locations","locations","selectedLocationId","onChangeLocation","onNewLocation","className","_ref9","id","title","LocationSearch_ActiveLocationLink","LocationSearch_LocationLink","LocationSearch_EmptyLocationLink","LocationSearch","_this2","Promise","all","openstreetmapId","_ref10","fetch","concat","then","r","json","_ref11","place_id","_ref11$centroid$coord","centroid","coordinates","lng","lat","geometry","names","center","geojson","type","features","_this3","location","find","_ref12","LocationSearch_AppControllers","SearchRegion_SearchRegion","_ref13","searchedFeature","selectedLocation","_ref14","l","toConsumableArray","objectSpread","LocationSearch_GeoJsonEditorStore","initialGeojson","_ref15","_ref16","onSaveGeojson","build","googleMapKey","initialMode","existingPolygons","zoom","mapHeight","onSave","area","nextId","GeoJsonEditorStore","_Component2","_getPrototypeOf3","_this4","_len2","args","Array","_key2","apply","_this5","setTimeout","actions","bind","children","App","src_LocationSearch","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5054ce87.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nconst languages = [\n    {\n      name: 'C',\n      year: 1972\n    },\n    {\n      name: 'C#',\n      year: 2000\n    },\n    {\n      name: 'C++',\n      year: 1983\n    },\n    {\n      name: 'Clojure',\n      year: 2007\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    },\n    {\n      name: 'Go',\n      year: 2009\n    },\n    {\n      name: 'Haskell',\n      year: 1990\n    },\n    {\n      name: 'Java',\n      year: 1995\n    },\n    {\n      name: 'Javascript',\n      year: 1995\n    },\n    {\n      name: 'Perl',\n      year: 1987\n    },\n    {\n      name: 'PHP',\n      year: 1995\n    },\n    {\n      name: 'Python',\n      year: 1991\n    },\n    {\n      name: 'Ruby',\n      year: 1995\n    },\n    {\n      name: 'Scala',\n      year: 2003\n    }\n  ];\n  \n  // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n  function escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  // function getSuggestions(value) {\n  //   const escapedValue = escapeRegexCharacters(value.trim());\n    \n  //   if (escapedValue === '') {\n  //     return [];\n  //   }\n  \n  //   const regex = new RegExp('^' + escapedValue, 'i');\n  \n  //   return languages.filter(language => regex.test(language.name));\n  // }\n  \n  function getSuggestionValue(suggestion) {\n    return suggestion.name;\n  }\n  \n  function renderSuggestion(suggestion) {\n    return (\n      <span>{suggestion.name}</span>\n    );\n  }\n  \n  export class SearchRegion extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        value: '',\n        suggestions: [],\n      };    \n    }\n\n    getSuggestions = (value) => {\n      const escapedValue = escapeRegexCharacters(value.trim());\n      \n      if (escapedValue === '') {\n        return [];\n      }\n    \n      const regex = new RegExp('^' + escapedValue, 'i');\n    \n      return (this.props.regions||[]).filter(region => regex.test(region.name));\n    }\n  \n    onChange = (event, { newValue, method }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n    \n    onSuggestionsFetchRequested = ({ value }) => {\n      console.log('[onSuggestionsFetchRequested]', value);\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n  \n    onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n      console.log('[onSuggestionSelected]', suggestion);\n      this.props.onSuggestionSelected(suggestion)\n    }\n  \n    render() {\n      const { value, suggestions } = this.state;\n      const inputProps = {\n        placeholder: this.props.placeholder,\n        value,\n        onChange: this.onChange\n      };\n  \n      return (\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          onSuggestionSelected={this.onSuggestionSelected}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n      );\n    }\n  }\n  \n  export default SearchRegion;\n","import React, {Component} from 'react';\nimport { GeoJsonEditor } from 'react-geojson-editor';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleRight, faEllipsisH } from '@fortawesome/free-solid-svg-icons'\n\nimport 'flexboxgrid/css/flexboxgrid.min.css'\nimport { SearchRegion } from './SearchRegion';\n\n// @TODO cleanup demo\n/**\n * Select for extra regions to combine with current location\n */\n\nfunction * IdGenerator( i = 2, n = 100) {\n  while(i < n) {\n    yield ++i;\n  }\n}\nconst generator = IdGenerator();\n\nconst geojsonInput1 = {\"type\":\"FeatureCollection\",\"features\":[{\n  \"type\":\"Feature\",\n  \"geometry\": {\n    type: 'MultiPolygon',\n    coordinates: [\n      [[\n        [51.614090500221955, -0.24650733496093835],\n        [51.57057931201116, -0.23414771582031335],\n        [51.5893539558775, -0.20256202246093835],\n        [51.61835405978723, -0.08445899511718835],\n        [51.614090500221955, -0.24650733496093835],\n      ].map(([f,l]) => [l,f])],\n      [[\n        [51.614090500221955, -0.24650733496093835],\n        [51.68396230862656, -0.04600684667968835],\n        [51.684813739230265, -0.22865455175781335],\n        [51.6362566365055, -0.25337379003906335],\n        [51.614090500221955, -0.24650733496093835],\n      ].map(([f,l]) => [l,f])],\n    ]\n  }\n}]}\n\nconst geojsonInput2 = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-0.43945472265625085,51.614090500221955],[-0.23483436132812585,51.63455193356165],[-0.42709510351562585,51.56716490703792],[-0.43945472265625085,51.614090500221955]]],[[[-0.31860511328125085,51.50224248146701],[-0.32409827734375085,51.43380302232152],[-0.18539588476562585,51.44921085147424],[-0.17028968359375085,51.55777397108853],[-0.31860511328125085,51.50224248146701]]],[[[-0.12222449804687585,51.63455193356165],[-0.20599525000000085,51.59447296719683],[-0.10299842382812585,51.536423721773986],[-0.07827918554687585,51.52531763251027],[-0.06866614843750085,51.59703225653475],[-0.08651893164062585,51.616648684023644],[-0.12222449804687585,51.63455193356165]]]]},\"properties\":{}}]};\n\nconst LocationLink = ({ onClick, name, description }) => {\n    return <button style={{ border: 'none', outline: 'none' ,width: '100%', padding: 0, margin: 0, opacity: 0.5 }} onClick={onClick}>\n      <div style={{ width: 'calc(100% - 30px)', height: 120, border: '1px gray solid', cursor: 'pointer', padding: 15 }}>\n        <div style={{ width: '100%', height: '100%', padding: 0, display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n          <div style={{ height: '100%', padding: 0, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n            <h2 style={{ textAlign: 'left' }}>{name}</h2>\n            <div style={{ textAlign: 'left' }}>{description}</div>\n            <div></div>\n            <div></div>\n          </div>\n          <div style={{ width: 25, marginLeft: 5, height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n            <div></div>\n            <div></div>\n          </div>\n        </div>\n      </div>\n    </button>;\n}\n\nconst ActiveLocationLink = ({ onClick, name, description }) => {\n  return <div style={{ border: 'none', outline: 'none' ,width: '100%', padding: 0, margin: 0 }} >\n    <div style={{ width: 'calc(100% - 30px)', height: 120, border: '1px gray solid', padding: 15 }}>\n      <div style={{ width: '100%', height: '100%', padding: 0, display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n        <div style={{ border: 'none', outline: 'none', cursor: 'pointer', height: '100%', padding: 0, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }} >\n          <h2 style={{ textAlign: 'left' }}>{name}</h2>\n          <div style={{ textAlign: 'left' }}>{description}</div>\n          <div></div>\n          <div></div>\n        </div>\n        <div style={{ width: 25, marginLeft: 5, height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n          <div></div>\n          <div>\n            <div style={{ border: 'none', outline: 'none', cursor: 'pointer', paddingTop: '0.2em' }} ><FontAwesomeIcon icon={faAngleRight} style={{ color: '#0074ff' }} /></div>\n          </div>\n              <button style={{ border: 'none', outline: 'none', cursor: 'pointer', }} onClick={() => {\n                debugger;\n              }}><FontAwesomeIcon icon={faEllipsisH} /></button>\n        </div>\n      </div>\n    </div>\n  </div>;\n}\n\nconst EmptyLocationLink = ({ showControls, onClick, name, description }) => {\n  return <button style={{ border: 'none', outline: 'none' ,width: '100%', padding: 0, margin: 0, opacity: showControls ? 1 : 0.5 }} disabled={showControls} onClick={onClick}>\n    <div style={{ width: 'calc(100% - 30px)', height: 120, border: '1px gray solid', cursor: 'pointer', padding: 15 }}>\n      <div style={{ width: '100%', height: '100%', padding: 0, display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n        <div style={{ height: '100%', padding: 0, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n          <h2 style={{ textAlign: 'left' }}>{name}</h2>\n          <div style={{ textAlign: 'left' }}>{description}</div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>\n  </button>;\n}\n\n\nconst AppControllers = ({ locations = [], selectedLocationId, onChangeLocation, onNewLocation, className }) => (\n  <div className={className} >\n    {locations.map(({ id, title, description }) =>\n      <div className=\"box\" key={id}>\n        {\n          id === selectedLocationId ?\n          <ActiveLocationLink showControls={id === selectedLocationId} onClick={() => onChangeLocation(id)} name={title} description={description} /> :\n          <LocationLink showControls={id === selectedLocationId} onClick={() => onChangeLocation(id)} name={title} description={description} />\n        }\n      </div>\n    )}\n    <div className=\"box\">\n      <EmptyLocationLink showControls={!selectedLocationId} onClick={onNewLocation} name=\"New Location\" description=\"Draw then click save button\" />\n    </div>\n  </div>\n)\n\nclass LocationSearch extends Component {\n  state = {\n    locations: [],\n    selectedLocationId: 0,\n  };\n\n  componentDidMount() {\n    const OPENSTREETMAP_GEOJSON_API = 'https://nominatim.openstreetmap.org/details.php?polygon_geojson=1&format=json'\n    const staticLocations = [\n      {\n        title: 'Manhattan',\n        openstreetmapId: '199324647'\n      },\n      {\n        title: 'Soho',\n        openstreetmapId: '199241405'\n      },\n      {\n        title: 'Central Park',\n        openstreetmapId: '250753466'\n      },\n      {\n        title: 'Harlem',\n        openstreetmapId: '199412251'\n      },\n      {\n        title: 'Queens County',\n        openstreetmapId: '198839459'\n      }, {\n        title: 'City of London',\n        openstreetmapId: '198098990'\n      }, {\n        title: 'London',\n        openstreetmapId: '197735118'\n      }\n    ];\n    \n    Promise.all(\n      staticLocations.map(({ openstreetmapId }) =>\n        fetch(`${OPENSTREETMAP_GEOJSON_API}&place_id=${openstreetmapId}`).then(r => r.json())\n        .then(({ place_id, centroid: { coordinates: [lng, lat] }, geometry: { coordinates }, names: { name } }) => {\n          const geometry = {\"type\":\"MultiPolygon\",\"coordinates\": [coordinates] }\n\n          return { id: place_id, center: { lng, lat }, title: name, name, description: '', geojson: {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\", geometry }] } }\n        })\n      )\n    ).then(locations => {\n      // => { id: string, title: string, description: string, geojson: any }\n      this.setState(() => ({ locations }))\n    })\n  }\n\n  render() {\n    let location = this.state.locations.find(({ id }) => id === this.state.selectedLocationId);\n    return <div className=\"App\">\n      <div className=\"row top-xs\">\n          <AppControllers\n            className=\"col-xs-12 col-sm-12 col-md-4 col-lg-4\"\n            locations={this.state.locations}\n            selectedLocationId={this.state.selectedLocationId}\n            onChangeLocation={(selectedLocationId) => { this.setState({ selectedLocationId }) }}\n            onNewLocation={() => { this.setState({ selectedLocationId: 0 }) }}\n          />    \n        <div className=\"col-xs-12 col-sm-12 col-md-8 col-lg-8\">\n          <div className=\"box\" style={{ height: 800 }}>\n            <div className=\"App-flex\" style={{ border: '1px solid grey', padding: '1em' }}>\n\n              <SearchRegion\n                placeholder=\"Search ...\"\n                regions={this.state.locations}\n                onSuggestionSelected={({ geojson: { features: [ searchedFeature] } }) => {\n\n                    this.setState(state => {\n                      // const location = state.locations.find()\n                      // let selectedLocation = this.state.locations.find(({ id }) => id === this.state.selectedLocationId);\n                      const selectedLocation = state.locations.find(({ id }) => id === state.selectedLocationId);\n\n                      const locations = state.locations.map(l => {                        \n                        if(l === selectedLocation) {\n                          const features = [\n                            ...selectedLocation.geojson.features,\n                            searchedFeature\n                          ];\n                          return { ...selectedLocation, geojson: {  ...selectedLocation.geojson, features } }\n                        }\n\n                        return l;\n                      });\n\n\n                      return {\n                        locations\n                      }\n                    });\n\n\n                }}\n              />\n\n            </div>\n            <div className=\"App-flex\" style={{ border: '1px solid grey' }}>\n \n\n            <GeoJsonEditorStore \n            initialGeojson={location ? location.geojson : null}\n  >\n    {({ geojson, center }, { onSaveGeojson }) => {\n        console.log(location && location.geojson);\n        \n        return (<div style={{ width: '100%', height: 700 }}>\n            <GeoJsonEditor\n              googleMapKey=\"AIzaSyD_HADQAEoHkZhBhqh-oDaiLHuRyHbyP9c\"\n              initialMode=\"VIEW\"\n              existingPolygons={location ? location.geojson : undefined}\n              center={location ? location.center : undefined}\n              zoom={11}\n              mapHeight={700}\n              onSave={(geojson, area) => {\n                console.log('geojson area', geojson, area);\n                const description = `Region with an area of ${area} square meters`;\n\n                // @TODO send this geojson to backend\n                this.setState(state => {\n                  // update existing location\n                  if (state.selectedLocationId) {\n                    const locations = state.locations.map(location => {\n                      const { id } = location;\n                      return id === state.selectedLocationId ? { ...location, geojson, description } : location;\n                    });\n                    return { locations }\n                  }\n\n                  // create new location\n                  const nextId = generator.next().value;\n                  return {\n                    selectedLocationId: nextId,\n                    locations: [\n                      ...state.locations,\n                      {\n                        id: nextId,\n                        title: `Location ${nextId}`,\n                        description,\n                        geojson,\n                      }\n                  ]\n                };\n              })\n              }}\n            />\n          </div>);\n    }}\n  </GeoJsonEditorStore>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n}\n\nexport default LocationSearch;\n\n\n\n\nexport class GeoJsonEditorStore extends Component {\n    state = {\n      geojson: this.props.initialGeojson,\n      center: { lat: 51.528308, lng: -0.3817765 },\n    };\n  \n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                center: { lng: -73.9598295, lat: 40.7900869 }, // { lat: 51.528308, lng: -0.7817765 },\n            })\n        }, 5000);\n    }\n\n    onSaveGeojson(geojson) {\n      this.setState({ geojson });\n    }\n  \n    render() {\n      const actions = {\n        onSaveGeojson: this.onSaveGeojson.bind(this),\n      };\n      console.log(this.state);\n      return this.props.children(this.state, actions);\n    }\n  }\n\n  export const Demo2 = () => <GeoJsonEditorStore>\n{({ geojson, center }, { onSaveGeojson }) => {\nconsole.log(center);\n\nreturn (<div style={{ width: 500, height: 500 }}>\n  <GeoJsonEditor\n    googleMapKey={process.env.REACT_APP_GOOGLE_MAP_KEY}\n    // initialMode=\"VIEW\"\n    //   existingPolygons={location ? location.geojson : null}\n    //   center={location ? location.center : { lat: 51.528308, lng: -0.7817765 }}\n    center={center}\n    zoom={10}\n    onSave={onSaveGeojson}\n  />\n</div>);\n}}\n</GeoJsonEditorStore>\n// export default Demo2;\n\n/**\n                  // @TODO send this geojson to backend\n                  this.setState(state => {\n                    // update existing location\n                    if (state.selectedLocationId) {\n                      const locations = state.locations.map(location => {\n                        const { id } = location;\n                        return id === state.selectedLocationId ? { ...location, geojson, description } : location;\n                      });\n                      return { locations }\n                    }\n\n                    // create new location\n                    const nextId = generator.next().value;\n                    return {\n                      selectedLocationId: nextId,\n                      locations: [\n                        ...state.locations,\n                        {\n                          id: nextId,\n                          title: `Location ${nextId}`,\n                          description,\n                          geojson,\n                        }\n                    ]\n                  };\n                })\n */\n","import React, { Component } from 'react';\n\n// import { GeoJsonEditorDemo } from './GeoJsonEditorDemo';\n\nimport './App.css';\nimport LocationSearch from './LocationSearch';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <LocationSearch />\n          {/* <GeoJsonEditorDemo /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}